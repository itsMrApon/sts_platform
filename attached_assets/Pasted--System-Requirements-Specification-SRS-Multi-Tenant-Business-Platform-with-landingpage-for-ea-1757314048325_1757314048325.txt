# System Requirements Specification (SRS)

## Multi-Tenant Business Platform with landingpage for each of the service Frontend(modify with later backend completion)

### Document Information

- **Version**: 1.0
- **Date**: December 2024
- **Project**: STS (StrongTermStrategy)(SudoTechServe)(SwitchToSwag) Multi-Brand Platform
- **Status**: Draft

---

## 1. Executive Summary

This document outlines the system requirements for a comprehensive multi-tenant business platform that supports three distinct brands (SudoTechServe, SwitchToSwag, StrongTermStrategy) with a unified frontend landingpage for each of the service system. The platform combines complex business operations (procurement, manufacturing, e-commerce, agency services) with a modern web presence.

### 1.1 Project Scope

- **Multi-tenant architecture** supporting 3+ business entities
- **Portfolio/CMS frontend** for brand presence and content management
- **Business operations backend** with ERPNext and Saleor integration
- **Unified API gateway** serving all tenant-specific operations
- **Scalable infrastructure** ready for microservices evolution

---

## 2. System Overview

### 2.1 Architecture Pattern

- **Modular Monolith** approach for rapid MVP development
- **Multi-tenant** with schema-per-tenant isolation
- **API Gateway** pattern for unified access
- **Event-driven** architecture for business process automation
- **Microservices-ready** for future scaling

### 2.2 Core Components

1. **Frontend Layer**: Next.js landingpage for each of the service (Vercel deployment)
2. **API Gateway**: Traefik/Nginx with tenant routing
3. **Backend Services**: NestJS modular monolith
4. **Database Layer**: PostgreSQL 16 with tenant schemas
5. **External Integrations**: ERPNext, Saleor, Keycloak
6. **Infrastructure**: Docker Compose on VPS

---

## 3. Functional Requirements

### 3.1 Multi-Tenant Management

#### 3.1.1 Tenant Configuration

- **Tenant Types**:
  - SudoTechServe (Agency/SaaS)
  - SwitchToSwag (E-commerce/Design)
  - StrongTermStrategy (Procurement/Manufacturing)
- **Tenant Isolation**: Schema-per-tenant in PostgreSQL
- **Tenant Routing**: Subdomain-based (sudotechserve.sts.com, switchtoswag.sts.com, etc.)
- **Tenant Onboarding**: Automated tenant provisioning with default configurations

#### 3.1.2 User Management

- **Authentication**: Keycloak SSO with OIDC/OAuth2
- **Role-Based Access Control**:
  - Owner, Admin, Finance, Ops, Procurement, Warehouse, Designer, Agent, Vendor, Client
- **Multi-tenant Users**: Users can belong to multiple tenants with different roles
- **User Provisioning**: Automated user creation and role assignment

### 3.2 Frontend Portfolio/CMS System

#### 3.2.1 Content Management

- **Blog System**: Multi-category blog with rich content features
  - Featured posts, quotes, video content, image sliders
  - Draft/published/archived status management
  - SEO-friendly slugs and meta data
- **Portfolio Management**: Project showcase with categorization
  - Project galleries with multiple images
  - Category-based filtering and search
  - Featured project highlighting
- **Team Management**: Staff profiles with social links
- **Menu Management**: Dynamic navigation with mega menu support
- **Social Links**: Configurable social media integration

#### 3.2.2 E-commerce Integration

- **Product Catalog**: Integration with Saleor for product display
- **Shopping Cart**: Basic cart functionality for frontend
- **Order Management**: Order tracking and status updates
- **Payment Integration**: Stripe, PayPal, regional gateways

### 3.3 Business Operations Backend

#### 3.3.1 Procurement Module (StrongTermStrategy)

- **Vendor Management**: Supplier database with performance tracking
- **RFQ Process**: Request for Quote workflow automation
- **Purchase Orders**: Automated PO generation and approval
- **Shipment Tracking**: Multi-country logistics management
- **Quality Control**: QC lot tracking and inspection workflows
- **Cost Management**: Landed cost calculation and margin analysis

#### 3.3.2 Manufacturing Module (StrongTermStrategy)

- **Design-to-Production Workflow**:
  - Custom design submission and approval system
  - Design voting mechanism for production approval
  - Cost breakdown at each manufacturing step
  - Event-driven triggers for production initiation
- **Bulk Order Production Planning (clothing-focused)**:
  - Step 1: Select fabric (source, composition, GSM, dyeing/finishing)
  - Step 2: Select pattern (base pattern by size set)
  - Step 3: Edit pattern (fit, allowances, grading)
  - Step 4: Select layout/marker (size ratio, fabric width)
  - Step 5: Edit layout (marker efficiency, waste optimization)
  - Step 6: Print/AMBO (marker print or automated marking/bundling)
  - Step 7: Accessories (threads, trims, labels, packaging)
  - Step 8: Finishing (wash/press, QC, packing)
  - Step 9: FOB (incoterms, port, shipment plan)
  - Step 10: Final rate calculation (material + labor + overhead + margin)
- **Multi-Location Production**:
  - NYC, Sweden, Bangladesh manufacturing locations
  - Location-specific sourcing and production capabilities
  - Cross-location resource allocation and scheduling
- **Clothing Manufacturing Focus**:
  - Knit fabric sourcing and pattern management
  - Multi-layer production processes
  - Fabric, pattern, and layer configuration management
- **BOM Management**: Bill of Materials with version control and location-specific variants
- **Work Orders**: Production scheduling and tracking across multiple locations
- **Resource Planning**: Machine and labor capacity management per location
- **Quality Control**: Production QC and yield tracking with location-specific standards
- **Cost Calculation**: Step-by-step production costing with location-based pricing
- **FOB Shipment Management**: End-to-end production to FOB delivery workflow

#### 3.3.3 E-commerce Module (SwitchToSwag)

- **Product Categories**:
  - Unique gadgets and electronics
  - Leather goods and accessories
  - 3D printed items
  - Winter clothing accessories
  - Custom designed products
- **On-Demand EDC Store (custom)**:
  - Customer chooses base product → selects material/finish → personalization options
  - Dynamic price calculation (base + options + lead time factor)
  - Order creates MTO/MTS decision in ERPNext
  - If MTO, trigger BOM/WO routing; if MTS, reserve stock
  - Frontend status: queued → in production → QA → shipped
- **Multi-Channel Sales**: eBay, Amazon, Shopify, AliExpress, Temu integration
- **Inventory Management**: Real-time stock synchronization with ERPNext
- **Order Fulfillment**: Automated order processing and routing
- **Dropshipping**: Vendor assignment and fulfillment routing
- **Made-to-Order Integration**:
  - Custom design approval workflow
  - Production trigger from e-commerce orders
  - Cost breakdown and pricing integration
- **Design Studio Integration**:
  - Fashion design workflow management
  - Pattern and design asset management
  - Multi-location production coordination

#### 3.3.4 Agency/SaaS Module (SudoTechServe)

- **CRM Pipeline**: Lead to deal conversion tracking
- **Project Management**: Task and timesheet management
- **SaaS Product Portfolio**:
  - Cashbook application
  - AR (Augmented Reality) for shoes, glasses, clothing
  - Virtual tour applications
  - Subscription-based store management tools
- **Subscription Management**: SaaS product billing and usage tracking
- **Support System**: Ticket management and customer support
- **Asset Management**:
  - Design library and version control
  - S3/MinIO storage for design assets
  - Design briefs and proof workflow management
  - Export presets for manufacturing handoff
- **Automation Features**:
  - Chat system integration
  - Discord features for team communication
  - Automated campaign management
- **Multi-Location Integration**:
  - Asset linking to specific manufacturing locations (NYC, Sweden, BD)
  - Location-specific design and production workflows

#### 3.3.5 BPO/Friend Portal Module

- **Assignment Management**: Task and project assignment system
- **KYC (Know Your Customer)**: Customer verification and onboarding
- **Payout Management**: Payment processing and settlement tracking
- **Dispute Center**: Issue resolution and conflict management
- **Document Vault**: Secure document storage and sharing
- **Client Finder Fee Schedule**: Commission tracking and management
- **Settlement System**: Weekly/monthly settlement processing
- **External Supplier Integration**: Standard ERPNext API connections

### 3.4 Integration Requirements

#### 3.4.1 ERPNext Integration

- **Data Synchronization**: Bidirectional sync for products, orders, inventory
- **Webhook Processing**: Real-time event handling
- **Custom Workflows**: Business process automation
- **Financial Integration**: Accounting and payment reconciliation
- **Multi-Country Sourcing Automation**:
  - Auto-routing shipments from USA/China to Bangladesh
  - Integration with friends/partners' stock systems
  - Advanced landed cost calculation and exception handling
- **Advanced Workflow Triggers**:
  - Automatic purchase orders when thresholds are met across multiple warehouses
  - Design approval to production workflow triggers
  - Cost breakdown event points for manufacturing decisions

#### 3.4.2 Saleor Integration

- **Product Sync**: Catalog synchronization from ERPNext
- **Order Processing**: Order flow from Saleor to ERPNext
- **Inventory Updates**: Real-time stock level synchronization
- **Payment Processing**: Payment gateway integration

#### 3.4.3 External APIs

- **Marketplace APIs**: eBay, Amazon, AliExpress integration
- **Shipping APIs**: Shippo/EasyPost for logistics
- **Payment Gateways**: Stripe, PayPal, regional providers
- **Communication**: Twilio, WhatsApp API integration

---

## 4. Non-Functional Requirements

### 4.1 Performance Requirements

- **Response Time**: API responses < 200ms for 95% of requests
- **Throughput**: Support 1000+ concurrent users per tenant
- **Scalability**: Horizontal scaling capability for microservices migration
- **Caching**: Redis-based caching for frequently accessed data

### 4.2 Security Requirements

- **Authentication**: JWT-based with refresh token rotation
- **Authorization**: Role-based access control with tenant isolation
- **Data Encryption**: At-rest and in-transit encryption
- **Audit Logging**: Comprehensive audit trail for all operations
- **Compliance**: PCI DSS for payment processing

### 4.3 Reliability Requirements

- **Uptime**: 99.9% availability target
- **Backup**: Daily automated backups with point-in-time recovery
- **Disaster Recovery**: RTO < 4 hours, RPO < 1 hour
- **Monitoring**: Real-time system health monitoring

### 4.4 Usability Requirements

- **Admin Interface**: Intuitive dashboard for tenant management
- **API Documentation**: Comprehensive API documentation with examples
- **Error Handling**: Clear error messages and status codes
- **Multi-language**: Support for English and Bengali (future)

---

## 5. Technical Architecture

### 5.1 Technology Stack

#### 5.1.1 Frontend

- **Framework**: Next.js 14+ with TypeScript
- **Deployment**: Vercel with edge functions
- **Styling**: Tailwind CSS with custom design system
- **State Management**: Zustand or Redux Toolkit
- **Authentication**: NextAuth.js with Keycloak provider

#### 5.1.2 Backend

- **Framework**: NestJS with TypeScript
- **Database**: PostgreSQL 16 with Prisma ORM
- **Cache**: Redis 7+ for caching and sessions
- **Message Queue**: Redis Pub/Sub or RabbitMQ
- **File Storage**: MinIO (S3-compatible) with Cloudflare R2 backup

#### 5.1.3 Infrastructure

- **Containerization**: Docker Compose
- **Reverse Proxy**: Traefik with Let's Encrypt
- **Monitoring**: Prometheus + Grafana + Loki
- **Error Tracking**: Sentry
- **Uptime Monitoring**: Uptime Kuma

### 5.2 Database Design

#### 5.2.1 Multi-Tenant Schema

```sql
-- Tenant management
CREATE SCHEMA tenant_management;
CREATE TABLE tenant_management.tenants (
  id UUID PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  subdomain VARCHAR(100) UNIQUE NOT NULL,
  status VARCHAR(20) DEFAULT 'active',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Per-tenant schemas
CREATE SCHEMA sudotechserve;
CREATE SCHEMA switchtoswag;
CREATE SCHEMA strongtermstrategy;
```

#### 5.2.2 Core Tables (Per Tenant)

- **Users**: User management with tenant association
- **Products**: Product catalog with variants and location-specific pricing
- **Orders**: Order management with line items and fulfillment tracking
- **Inventory**: Stock management with multi-location support
- **Vendors**: Supplier management with performance tracking
- **Projects**: Project and task management with timesheet integration
- **Designs**: Design management with approval workflow and version control
- **Manufacturing**: BOM, Work Orders, Routing, QC lots, Machines, Labor tracking
- **Procurement**: RFQ, Quotes, PO, Contracts, Shipments, QC tracking
- **SaaS Products**: Subscription management for cashbook, AR, virtual tours
- **BPO Management**: Assignments, KYC, payouts, disputes, document vault
- **Assets**: Design library, briefs, proof workflow, export presets
- **Blog Posts**: Content management with rich media support
- **Portfolio**: Project showcase with multi-location production examples
- **Team Members**: Staff profiles with social links and location assignments
- **Contact Messages**: Lead management and CRM integration
- **Voting System**: Design approval and production decision tracking

### 5.3 API Design

#### 5.3.1 API Gateway Configuration

```yaml
# Traefik configuration
http:
  routers:
    api-gateway:
      rule: "Host(`api.sts.com`)"
      service: nestjs-backend
      middlewares:
        - tenant-resolver
        - rate-limit
        - auth-required
```

#### 5.3.2 API Endpoints Structure

```
/api/v1/
├── auth/                    # Authentication endpoints
├── tenants/                 # Tenant management
├── blog/                    # Blog management
├── portfolio/               # Portfolio management
├── products/                # Product catalog
├── orders/                  # Order management
├── inventory/               # Stock management
├── vendors/                 # Vendor management
├── projects/                # Project management
├── designs/                 # Design management and approval
├── manufacturing/           # Manufacturing workflows
├── procurement/             # Procurement and sourcing
├── saas/                    # SaaS product management
├── bpo/                     # BPO/Friend portal management
├── assets/                  # Asset and file management
├── voting/                  # Design approval voting system
├── locations/               # Multi-location management
├── team/                    # Team management
├── contact/                 # Contact management
├── menu/                    # Menu management
├── social/                  # Social links
└── webhooks/                # Webhook endpoints
```

---

## 6. Data Flow and Integration

### 6.1 Frontend to Backend Flow

1. **User Request** → Next.js Frontend
2. **Authentication** → Keycloak SSO
3. **API Gateway** → Traefik with tenant resolution
4. **Backend Service** → NestJS with tenant context
5. **Database** → PostgreSQL with tenant schema
6. **Response** → JSON API response

### 6.2 Business Process Integration

1. **Custom Design to Production Flow**:
   - Design submission → Voting/Approval → Cost breakdown → Production decision
   - ERPNext receives order → checks stock → triggers Manufacturing module
   - BOM, Work Order, Routing, QC → FOB shipment delivery
2. **Multi-Channel E-commerce Flow**:
   - Product listings pushed to marketplaces (eBay, Amazon, Shopify, AliExpress, Temu)
   - Orders received → routed into ERPNext → vendor procurement → fulfillment
3. **Multi-Location Manufacturing Flow**:
   - Design approval → Location selection (NYC, Sweden, BD) → Production scheduling
   - Cross-location resource allocation → Quality control → FOB delivery
4. **SaaS Product Delivery Flow**:
   - Lead → Deal → Proposal → Project → Subscription billing → Payment
   - Asset management → Design workflow → Manufacturing handoff
5. **Procurement Flow**:
   - RFQ → Quote → Approve → PO → Production → Shipment → GRN → 3-way match
6. **Inventory Update** → ERPNext → Saleor → Frontend
7. **Payment Processing** → Stripe/PayPal → ERPNext → Accounting
8. **Vendor Communication** → ERPNext → Email/SMS → Vendor

### 6.3 Data Synchronization

- **Real-time**: Webhook-based updates for critical data
- **Batch**: Scheduled synchronization for non-critical data
- **Conflict Resolution**: Last-write-wins with audit logging
- **Data Validation**: Schema validation and business rule enforcement

---

## 7. Security and Compliance

### 7.1 Authentication and Authorization

- **Multi-tenant SSO**: Keycloak with tenant-specific configurations
- **JWT Tokens**: Short-lived access tokens with refresh rotation
- **Role-based Access**: Granular permissions per tenant and module
- **API Security**: Rate limiting, CORS, and input validation

### 7.2 Data Protection

- **Encryption**: AES-256 for data at rest, TLS 1.3 for data in transit
- **Tenant Isolation**: Schema-level isolation with RLS policies
- **Audit Logging**: Comprehensive audit trail for compliance
- **Data Retention**: Configurable retention policies per tenant

### 7.3 Compliance Requirements

- **PCI DSS**: For payment processing (Level 1 merchant)
- **GDPR**: Data protection and privacy compliance
- **SOC 2**: Security and availability controls
- **ISO 27001**: Information security management

---

## 8. Deployment and Operations

### 8.1 Infrastructure Requirements

- **VPS Specifications**: 8+ CPU cores, 32GB+ RAM, 500GB+ SSD
- **Database**: PostgreSQL 16 with read replicas
- **Cache**: Redis cluster for high availability
- **Storage**: MinIO cluster with S3-compatible API
- **CDN**: Cloudflare for global content delivery

### 8.2 Deployment Strategy

- **Blue-Green Deployment**: Zero-downtime deployments
- **Container Orchestration**: Docker Compose → Kubernetes migration
- **CI/CD Pipeline**: GitHub Actions with automated testing
- **Environment Management**: Development, staging, production environments

### 8.3 Monitoring and Observability

- **Metrics**: Prometheus with custom business metrics
- **Logging**: Structured logging with Loki aggregation
- **Tracing**: Distributed tracing with Jaeger
- **Alerting**: PagerDuty integration for critical alerts
- **Dashboards**: Grafana dashboards for system and business metrics

---

## 9. Migration and Rollout Plan

### 9.1 Phase 1: Foundation (Months 1-2)

- **Infrastructure Setup**: VPS, Docker, basic services
- **Core Backend**: NestJS with basic tenant management
- **Database Setup**: PostgreSQL with multi-tenant schemas
- **Authentication**: Keycloak integration
- **Frontend**: Next.js landing page for each service basic implementation
- **Basic API**: Core CRUD operations for blog, portfolio, products, team

### 9.2 Phase 2: Business Modules (Months 3-4)

- **Manufacturing Module**:
  - Design approval and voting system
  - Multi-location production workflows (NYC, Sweden, BD)
  - Cost breakdown and pricing calculation
  - BOM and Work Order management
- **Procurement Module**: StrongTermStrategy business logic
- **E-commerce Module**: SwitchToSwag integration with custom product categories
- **Agency Module**: SudoTechServe functionality with SaaS product management
- **ERPNext Integration**: Basic data synchronization
- **Saleor Integration**: Product and order management

### 9.3 Phase 3: Advanced Features (Months 5-6)

- **Advanced Integrations**:
  - Marketplace APIs (eBay, Amazon, AliExpress, Temu)
  - Shipping providers (Shippo/EasyPost)
  - Multi-country sourcing automation
- **SaaS Product Development**:
  - Cashbook application
  - AR applications for shoes, glasses, clothing
  - Virtual tour applications
- **Automation**:
  - Business process automation
  - Discord integration for team communication
  - Automated campaign management
- **Analytics**: Business intelligence dashboards
- **Mobile App**: React Native mobile application
- **Performance Optimization**: Caching and scaling improvements

### 9.4 Phase 4: Scale and Optimize (Months 7-8)

- **Microservices Migration**: Gradual service extraction
- **Multi-region Deployment**: Global infrastructure
- **Advanced Analytics**: Machine learning insights
- **API Marketplace**: Third-party developer access
- **Enterprise Features**: Advanced security and compliance

---

## 10. Risk Assessment and Mitigation

### 10.1 Technical Risks

- **Database Performance**: Mitigation through proper indexing and caching
- **Integration Complexity**: Phased integration approach with fallbacks
- **Scalability Issues**: Microservices-ready architecture from start
- **Data Loss**: Comprehensive backup and disaster recovery

### 10.2 Business Risks

- **Vendor Dependencies**: Multiple vendor options and fallback plans
- **Compliance Changes**: Flexible architecture for regulatory updates
- **Market Changes**: Modular design for quick feature adaptation
- **Competition**: Focus on unique value propositions and rapid iteration

### 10.3 Operational Risks

- **Team Scaling**: Documentation and knowledge sharing protocols
- **Security Breaches**: Multi-layered security with regular audits
- **System Downtime**: High availability architecture with monitoring
- **Data Migration**: Comprehensive testing and rollback procedures

---

## 11. Success Criteria

### 11.1 Technical Success Metrics

- **Performance**: < 200ms API response time, 99.9% uptime
- **Scalability**: Support 1000+ concurrent users per tenant
- **Security**: Zero security incidents, 100% audit compliance
- **Integration**: 99%+ data synchronization accuracy

### 11.2 Business Success Metrics

- **User Adoption**: 80%+ user satisfaction score
- **Operational Efficiency**: 50%+ reduction in manual processes
- **Revenue Impact**: 25%+ increase in business efficiency
- **Market Position**: Competitive advantage in target markets

### 11.3 Quality Assurance

- **Code Coverage**: 90%+ test coverage for critical modules
- **Performance Testing**: Load testing with realistic user scenarios
- **Security Testing**: Regular penetration testing and vulnerability assessments
- **User Acceptance**: Comprehensive UAT with all stakeholder groups

---

## 12. Appendices

### 12.1 API Documentation Reference

See `api_file.md` for detailed API endpoint specifications and request/response formats.

### 12.2 Business Requirements Reference

See `business.md` for detailed business requirements and domain specifications.

### 12.3 Technology Decision Records

- **NestJS**: Chosen for its modular architecture and TypeScript support
- **PostgreSQL**: Selected for ACID compliance and multi-tenant support
- **Keycloak**: Chosen for enterprise-grade authentication and authorization
- **Docker**: Selected for containerization and deployment consistency

### 12.4 Glossary

- **BRD**: Business Requirements Document
- **SRS**: System Requirements Specification
- **API**: Application Programming Interface
- **ERP**: Enterprise Resource Planning
- **CRM**: Customer Relationship Management
- **BOM**: Bill of Materials
- **RFQ**: Request for Quote
- **PO**: Purchase Order
- **QC**: Quality Control
- **SLA**: Service Level Agreement
- **RTO**: Recovery Time Objective
- **RPO**: Recovery Point Objective

---

**Document Control**

- **Author**: System Architect
- **Reviewers**: Technical Lead, Business Analyst, Product Owner
- **Approval**: CTO, CEO
- **Next Review**: Monthly during development, quarterly post-launch
